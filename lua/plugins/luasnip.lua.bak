return {
	"L3MON4D3/LuaSnip",
	-- follow latest release.
	version = "v2.*", -- Replace <CurrentMajor> by the latest released major (first number of latest release)
	-- install jsregexp (optional!).
	build = "make install_jsregexp",
	config = function()
		local ls = require("luasnip")
		local s = ls.snippet
		local sn = ls.snippet_node
		local t = ls.text_node
		local i = ls.insert_node
		local f = ls.function_node
		local c = ls.choice_node
		local d = ls.dynamic_node
		local r = ls.restore_node
		local l = require("luasnip.extras").lambda
		local rep = require("luasnip.extras").rep
		local p = require("luasnip.extras").partial
		local m = require("luasnip.extras").match
		local n = require("luasnip.extras").nonempty
		local dl = require("luasnip.extras").dynamic_lambda
		local fmt = require("luasnip.extras.fmt").fmt
		local fmta = require("luasnip.extras.fmt").fmta
		local types = require("luasnip.util.types")
		local conds = require("luasnip.extras.conditions")
		local conds_expand = require("luasnip.extras.conditions.expand")
		ls.add_snippets("c", {
			s("main", {
				t("#include <errno.h>"),
				t({ "", "#include <stdio.h>" }),
				t({ "", "#include <stdlib.h>" }),
				t({ "", "" }),
				t({ "", "int" }),
				t({ "", "main(int argc, char **argv)" }),
				t({ "", "{" }),
				t({ "", '\tfprintf(stdout, "Hello world.\\n");' }),
				i(0),
				t({ "", "\treturn EXIT_SUCCESS;" }),
				t({ "", "}" }),
			}),
		})
		ls.add_snippets("cpp", {
			s("main", {
				t("#include <iostream>"),
				t({ "", "#include <cstdlib>" }),
				t({ "", "" }),
				t({ "", "int" }),
				t({ "", "main(int argc, char **argv)" }),
				t({ "", "{" }),
				t({ "", '\tstd::cout << "Hello, World!";' }),
				i(0),
				t({ "", "\treturn EXIT_SUCCESS;" }),
				t({ "", "}" }),
			}),
		})
		ls.add_snippets("html", {
			s("html:5", {
				unpack(fmt(
					[[<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title></title>
    <link rel="stylesheet" href="style.css"/>
  </head>
  <body>
    <main>
		<div id="root">{}</div>
    </main>
	<script src="index.js" type="text/javascript"></script>
  </body>
</html>]],
					{ i(0, "") }
				)),
			}),
			s("script", { unpack(fmt([[<script src="{}"></script>]], { i(0, "") })) }),
			s("script:crossorigin", { unpack(fmt([[<script crossorigin src="{}"></script>]], { i(0, "") })) }),
			s(
				"script:type:javascript",
				{ unpack(fmt([[<script src="{}" type="text/javascript"></script>]], { i(0, "") })) }
			),
			s("link", { unpack(fmt([[<link rel="stylesheet" href="{}"/>]], { i(0, "") })) }),
		})
		ls.add_snippets("python", {
			s("main", {
				t("import os"),
				t({ "", "" }),
				t({ "", "def main():" }),
				t({ "", "\tprint('Hello world');" }),
				i(0),
				t({ "", "" }),
				t({ "", "if __name__ == '__main__':" }),
				t({ "", "\tmain()" }),
			}),
		})
		ls.add_snippets("rust", {
			s("main", {
				t({ "", "fn main() {" }),
				t({ "", '\tprintln!("Hello, world!");' }),
				i(0),
				t({ "", "}" }),
			}),
		})
		ls.add_snippets("tex", {
			s("int", {
				t("$int^{"),
				i(0),
				t("}"),
				t("_{"),
				i(1),
				t("}"),
			}),
		})
	end,
}
